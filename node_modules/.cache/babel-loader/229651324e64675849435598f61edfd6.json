{"ast":null,"code":"var _jsxFileName = \"/Users/dexter/Thinkful/pomodoro-timer/src/pomodoro/DurationControl.js\";\nimport React from \"react\"; // There are two of these in the app,\n// one for setting the focus duration\n// and one for setting the break duration\n\nfunction DurationControl({\n  dataTestIdEnding,\n  durations,\n  setDurations,\n  float = \"left\",\n  isTimerRunning\n}) {\n  const mode = titleCase(dataTestIdEnding);\n  const duration = durations[`${dataTestIdEnding}Duration`];\n\n  const handleMinusClick = () => {\n    if (!isTimerRunning && duration >= 1) {\n      setDurations(currentDurations => {\n        return { ...currentDurations,\n          [`${dataTestIdEnding}Duration`]: currentDurations[`${dataTestIdEnding}Duration`] - 1\n        };\n      });\n    }\n  };\n\n  const handlePlusClick = () => {\n    if (!isTimerRunning) {\n      setDurations(currentDurations => {\n        return { ...currentDurations,\n          [`${dataTestIdEnding}Duration`]: currentDurations[`${dataTestIdEnding}Duration`] + 1\n        };\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `float-${float} col`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group input-group-lg mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"input-group-text\",\n    \"data-testid\": `duration-${dataTestIdEnding}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }, mode, \" Duration: \", duration, \":00\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group-append\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    \"data-testid\": `decrease-${dataTestIdEnding}`,\n    onClick: handleMinusClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-minus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    \"data-testid\": `increase-${dataTestIdEnding}`,\n    onClick: handlePlusClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-plus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  })))));\n}\n\nconst titleCase = function (str) {\n  return str.toLowerCase().split(' ').map(word => {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }).join(' ');\n};\n\nexport { titleCase };\nexport default DurationControl;","map":{"version":3,"sources":["/Users/dexter/Thinkful/pomodoro-timer/src/pomodoro/DurationControl.js"],"names":["React","DurationControl","dataTestIdEnding","durations","setDurations","float","isTimerRunning","mode","titleCase","duration","handleMinusClick","currentDurations","handlePlusClick","str","toLowerCase","split","map","word","charAt","toUpperCase","slice","join"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;;AACA,SAASC,eAAT,CAAyB;AAAEC,EAAAA,gBAAF;AAAoBC,EAAAA,SAApB;AAA+BC,EAAAA,YAA/B;AAA6CC,EAAAA,KAAK,GAAG,MAArD;AAA6DC,EAAAA;AAA7D,CAAzB,EAAwG;AACpG,QAAMC,IAAI,GAAGC,SAAS,CAACN,gBAAD,CAAtB;AACA,QAAMO,QAAQ,GAAGN,SAAS,CAAE,GAAED,gBAAiB,UAArB,CAA1B;;AAEA,QAAMQ,gBAAgB,GAAG,MAAM;AAC3B,QAAI,CAACJ,cAAD,IAAmBG,QAAQ,IAAI,CAAnC,EAAsC;AAClCL,MAAAA,YAAY,CAAEO,gBAAD,IAAsB;AAC/B,eAAO,EACH,GAAGA,gBADA;AAEH,WAAE,GAAET,gBAAiB,UAArB,GAAkCS,gBAAgB,CAAE,GAAET,gBAAiB,UAArB,CAAhB,GAAkD;AAFjF,SAAP;AAIH,OALW,CAAZ;AAMH;AACJ,GATD;;AAWA,QAAMU,eAAe,GAAG,MAAM;AAC1B,QAAI,CAACN,cAAL,EAAqB;AACjBF,MAAAA,YAAY,CAAEO,gBAAD,IAAsB;AAC/B,eAAO,EACH,GAAGA,gBADA;AAEH,WAAE,GAAET,gBAAiB,UAArB,GAAkCS,gBAAgB,CAAE,GAAET,gBAAiB,UAArB,CAAhB,GAAkD;AAFjF,SAAP;AAIH,OALW,CAAZ;AAMH;AACJ,GATD;;AAWA,sBACI;AAAK,IAAA,SAAS,EAAG,SAAQG,KAAM,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAM,IAAA,SAAS,EAAC,kBAAhB;AAAmC,mBAAc,YAAWH,gBAAiB,EAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCK,IADD,iBACkBE,QADlB,QADJ,eAII;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,SAAS,EAAC,mBAFd;AAGI,mBAAc,YAAWP,gBAAiB,EAH9C;AAII,IAAA,OAAO,EAAEQ,gBAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADA,eASA;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,SAAS,EAAC,mBAFd;AAGI,mBAAc,YAAWR,gBAAiB,EAH9C;AAII,IAAA,OAAO,EAAEU,eAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CATA,CAJJ,CADJ,CADJ;AA2BH;;AAED,MAAMJ,SAAS,GAAG,UAASK,GAAT,EAAc;AAC5B,SAAOA,GAAG,CAACC,WAAJ,GAAkBC,KAAlB,CAAwB,GAAxB,EAA6BC,GAA7B,CAAkCC,IAAD,IAAU;AAC9C,WAAQA,IAAI,CAACC,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BF,IAAI,CAACG,KAAL,CAAW,CAAX,CAAvC;AACH,GAFM,EAEJC,IAFI,CAEC,GAFD,CAAP;AAGH,CAJD;;AAMA,SAASb,SAAT;AACA,eAAeP,eAAf","sourcesContent":["import React from \"react\";\n\n// There are two of these in the app,\n// one for setting the focus duration\n// and one for setting the break duration\nfunction DurationControl({ dataTestIdEnding, durations, setDurations, float = \"left\", isTimerRunning }) {\n    const mode = titleCase(dataTestIdEnding);\n    const duration = durations[`${dataTestIdEnding}Duration`];\n\n    const handleMinusClick = () => {\n        if (!isTimerRunning && duration >= 1) {\n            setDurations((currentDurations) => {\n                return {\n                    ...currentDurations,\n                    [`${dataTestIdEnding}Duration`] : currentDurations[`${dataTestIdEnding}Duration`] - 1,\n                }\n            });\n        }\n    }\n\n    const handlePlusClick = () => {\n        if (!isTimerRunning) {\n            setDurations((currentDurations) => {\n                return {\n                    ...currentDurations,\n                    [`${dataTestIdEnding}Duration`] : currentDurations[`${dataTestIdEnding}Duration`] + 1,\n                }\n            });\n        }\n    }\n\n    return (\n        <div className={`float-${float} col`}>\n            <div className=\"input-group input-group-lg mb-2\">\n                <span className=\"input-group-text\" data-testid={`duration-${dataTestIdEnding}`}>\n                {mode} Duration: {duration}:00\n                </span>\n                <div className=\"input-group-append\">\n                <button\n                    type=\"button\"\n                    className=\"btn btn-secondary\"\n                    data-testid={`decrease-${dataTestIdEnding}`}\n                    onClick={handleMinusClick}\n                >\n                    <span className=\"oi oi-minus\" />\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-secondary\"\n                    data-testid={`increase-${dataTestIdEnding}`}\n                    onClick={handlePlusClick}\n                >\n                    <span className=\"oi oi-plus\" />\n                </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst titleCase = function(str) {\n    return str.toLowerCase().split(' ').map((word) => {\n        return (word.charAt(0).toUpperCase() + word.slice(1));\n    }).join(' ');\n};\n\nexport { titleCase };\nexport default DurationControl;"]},"metadata":{},"sourceType":"module"}