{"ast":null,"code":"var _jsxFileName = \"/Users/dexter/Thinkful/pomodoro-timer/src/pomodoro/Pomodoro.js\";\nimport DurationControl from \"./DurationControl\";\nimport ProgressBar from \"progress\";\nimport React, { useState } from \"react\";\nimport TimerControls from \"./TimerControls\";\nimport TimeDisplay from \"./TimeDisplay\";\nimport useInterval from \"../utils/useInterval\";\nconst initialDurations = {\n  focusDuration: 25,\n  breakDuration: 5\n}; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [durations, setDurations] = useState(initialDurations); // Timer starts out paused\n\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null);\n  const visibility = session != null ? \"visible\" : \"hidden\";\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(durations.focusDuration, durations.breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: durations.focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DurationControl, {\n    dataTestIdEnding: \"focus\",\n    durations: durations,\n    setDurations: setDurations,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DurationControl, {\n    dataTestIdEnding: \"break\",\n    durations: durations,\n    setDurations: setDurations,\n    float: \"right\",\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TimerControls, {\n    setDurations: setDurations,\n    isTimerRunning: isTimerRunning,\n    setIsTimerRunning: setIsTimerRunning,\n    playPause: playPause,\n    setSession: setSession,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      visibility: visibility\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TimeDisplay, {\n    session: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(ProgressBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport { initialDurations };\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/dexter/Thinkful/pomodoro-timer/src/pomodoro/Pomodoro.js"],"names":["DurationControl","ProgressBar","React","useState","TimerControls","TimeDisplay","useInterval","initialDurations","focusDuration","breakDuration","nextTick","prevState","timeRemaining","Math","max","nextSession","currentSession","label","Pomodoro","durations","setDurations","isTimerRunning","setIsTimerRunning","session","setSession","visibility","Audio","play","playPause","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import DurationControl from \"./DurationControl\";\nimport ProgressBar from \"progress\";\nimport React, { useState } from \"react\";\nimport TimerControls from \"./TimerControls\";\nimport TimeDisplay from \"./TimeDisplay\";\nimport useInterval from \"../utils/useInterval\";\n\nconst initialDurations = {\n  focusDuration : 25,\n  breakDuration : 5,\n}\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [durations, setDurations] = useState(initialDurations);\n\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  const visibility = session != null ? \"visible\" : \"hidden\";\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(durations.focusDuration, durations.breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: durations.focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <DurationControl \n            dataTestIdEnding=\"focus\" \n            durations={durations} \n            setDurations={setDurations} \n            isTimerRunning={isTimerRunning} \n          />\n        </div>\n        <div className=\"col\">\n          <DurationControl \n            dataTestIdEnding=\"break\" \n            durations={durations} \n            setDurations={setDurations} \n            float=\"right\" \n            isTimerRunning={isTimerRunning} \n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <TimerControls \n            setDurations={setDurations}\n            isTimerRunning={isTimerRunning} \n            setIsTimerRunning={setIsTimerRunning} \n            playPause={playPause} \n            setSession={setSession} \n          />\n        </div>\n      </div>\n      <div style={{ visibility: visibility }}>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <TimeDisplay session={session} />\n          </div>\n        </div>      \n        <ProgressBar />\n      </div>\n    </div>\n  );\n}\n\nexport { initialDurations };\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}